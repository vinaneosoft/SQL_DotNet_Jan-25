create table total_salarycommission(dept_code varchar(4) references departments(d_code) on delete cascade, total_salary number not null, total_commission number);

insert into total_salarycommission  
select dept_code, sum(salary),sum(commission) from employees group by dept_code;



   	CREATE OR REPLACE TRIGGER departments_salary_commission
    AFTER 
    insert or UPDATE OR DELETE 
    ON employees
    begin
     	delete from TOTAL_SALARYCOMMISSION;
    	insert into total_salarycommission  
        select dept_code, sum(salary),sum(commission) from employees group by dept_code;
	end;


delete from employees where employees_id=111;   /*stmt : 1, number of rows : 1 trigger*/
update employees set salary=salary+5000 where salary<=60000;  /* stmt :1,  rows affect : n  trigger*/

select * from TOTAL_SALARYCOMMISSION;

insert into employees values(7878, 'Meera', 'Kumari', 'Pune', 45, 45000,5000,'HR');
insert into employees values(4545, 'Meera', 'Kumari', 'Pune', 45, 45000,null,'HR');



declare
    ids SYS.ODCINUMBERLIST:=SYS.ODCINUMBERLIST(4444,5555,1111,2222);
begin
	FOR i IN 1 .. ids.COUNT 
    LOOP
    	insert into employees(employees_id, salary, commission) values(ids(i), 50000, 2000);
  	END LOOP;
end;


create table oldemployees(emp_id number primary key, salary number, commission number, dept_code varchar(10));

insert into oldemployees values(1111, 45000,2000, 'SM');
insert into oldemployees values(2222, 45000,2000, 'HR');
insert into oldemployees values(3333, 45000,2000,'LD');

insert into employees(employees_id, salary, commission, dept_code)
select * from oldemployees; 
/*statement is 1,  number if rows affected 3 ,  stmt level trigger : 1 time gets fired*/

 update of table's particular column 


CREATE OR REPLACE TRIGGER departments_salary_commission
AFTER 
insert or UPDATE of salary, commission OR DELETE 
ON employees
begin
    delete from TOTAL_SALARYCOMMISSION;
    insert into total_salarycommission  
    select dept_code, sum(salary),sum(commission) from employees group by dept_code;
    dbms_output.put_line('trigger fired');
	exception
        when others then
         dbms_output.put_line(sqlerrm);
end;

update employees set age=67 where employees_id=111; // trigger will not get fired
update employees set salary=67000 where employees_id=111; // trigger fired



begin
    update employees set salary=salary+4000 where dept_code='WD';
	update employees set salary=salary+3000 where dept_code='SM';
	rollback;
end;
/*update : employee table update, trigger fire : TOTAL_SALARYCOMMISSION insert
update : employee tabe update , trigger fire : TOTAL_SALARYCOMMISSION insert
rollback*/


instead of





create table salarydetails(
    employees_id number references employees on delete cascade,
    total number
);

CREATE OR REPLACE TRIGGER emp_totalsalary
AFTER  
insert or update of salary, commission ON employees
FOR EACH ROW

BEGIN
    delete from salarydetails where employees_id=:new.employees_id;
    insert into salarydetails values(:new.employees_id, :new.salary+nvl(:new.commission,0));
    dbms_output.put_line('trigger 2 fired');
END;

insert into employees values(111,'Kishor' ,'Pawar', 'Mumbai', 56, 80000, 2000,'WD');
insert into employees values(121,'Kamal' ,'Chopra', null, 40,70000,null,'HR');
insert into employees values(112,'Rupa' ,'Wagh', 'Pune', 56,75000,5000,'WD');
insert into employees values(131,'karuna' ,'Trivedi', 'Solapur', 46,65000,3000,'LD');
insert into employees values(115,'rupali' ,'Patil', 'pune', 45,75000,null,'SM');

update employees set salary=salary+5000 where dept_code='WD';

stmt : 1, number of rows affected : 2 : row level trigger
    1st fire
    111 old record delete,  re insert
    2nd fire
    112 old record delete, re insert




create table students(std_id number(8) primary key, 
    ph_marks number(5) not null, ch_marks number(5)  not null, 
    maths_marks number(5)  not null, bio_marks number(5)  not null, total_marks number);


CREATE OR REPLACE TRIGGER trig_total_marks
after  
insert ON STUDENTS
FOR EACH ROW
declare
    summ number;
	sid number;
BEGIN
   select PH_MARKS+CH_MARKS+MATHS_MARKS+BIO_MARKS,STD_ID into summ,sid from STUDENTS where STD_ID=:new.std_id;
   update STUDENTS set TOTAL_MARKS=summ where STD_ID=sid;
END;
 
Note : error :
table SQL_HETTJZMZNXOGIIUXQKQTUNOQT.STUDENTS is mutating, trigger/function




CREATE OR REPLACE TRIGGER departments_salary_commission
before 
insert or UPDATE of salary, commission OR DELETE 
ON employees
begin
    delete from TOTAL_SALARYCOMMISSION;
    insert into total_salarycommission  
    select dept_code, sum(salary),sum(commission) from employees group by dept_code;
    dbms_output.put_line('trigger fired');
	exception
        when others then
         dbms_output.put_line(sqlerrm);
end;



before insert/ update/ delete of employees from employee table, trigger gets fired and it will
calculate sum of salaries, sum of commissions department wise. means it will not consider new record
in sum. it considers 'to be deleted' record in sum bcz trigger gets fired before deletion from table




An INSTEAD OF trigger is a trigger that allows you to update data in tables via their view which cannot be modified directly through DML statements.

1. simple updatable view : insert or update or delete on view name
2. joined updatable view : instead of (insert / update /delete ) on view name

create view join_WDemployees
as 
select employees_id, first_name, last_name, dept_code, d_name, d_budget
from employees inner join departments on employees.dept_code=departments.d_code where dept_code='WD';

select * from join_WDemployees;

insert into join_WDemployees values(1212, 'Komal','Patil', 'JS', 'Javascript', 6700000); // error
make a trigger to insert into underlying tables, instead of view 




update on deparment
disable fk constraint from secondary table
primary table value change
secondary table value change
disable fk constraint from secondary table

