create or replace PROCEDURE get_department_byid ( emp_id IN number,  dept_id OUT varchar)      
IS 
BEGIN 
  select dept_code into dept_id from employees where employees_id=emp_id; 
EXCEPTION 
	when others then 
    	 dbms_output.put_line( SQLERRM ); 
END ;

DECLARE
dcode varchar(20);
BEGIN
get_department_byid(5555, dcode);
dbms_output.put_line(dcode);

END;



create or replace PROCEDURE get_department_byid ( emp_id IN number,  dept_id OUT varchar)      
IS 
BEGIN 
  select dept_code into dept_id from employees where employees_id=emp_id; 
END ;



DECLARE
dcode varchar(20);
BEGIN
dbms_output.put_line('calling procedure to get department code '); 
get_department_byid(121, dcode);
dbms_output.put_line(dcode);
exception 
    when others then
    dbms_output.put_line(sqlerrm);
END;



Q. increment budget by passedvalue of department with id passed to procdure. Also return old budget as well as updated budget
    dept code and increase amount pass to procedure
    and get old budget and updated budget from procedure

CREATE OR REPLACE PROCEDURE update_deptbudget(dept_id in varchar, amount in number, old_bdgt out number, new_bdgt out number) IS
BEGIN
    select d_budget into old_bdgt from departments where d_code = dept_id;
	update departments set d_budget=d_budget+amount  where d_code = dept_id;
    select d_budget into new_bdgt from departments where d_code = dept_id;
END;


declare
    d_code varchar(20) := 'HR';
    amount number := 300000;
    o_bdgt departments.d_budget%type;
    n_bdgt departments.d_budget%type;
begin
    update_deptbudget(d_code, amount, o_bdgt, n_bdgt);
    dbms_output.put_line('Original : ' || o_bdgt || ' and Updated : ' || n_bdgt);
end;



create or replace procedure create_table is
begin
    execute immediate 'create table test(id number primary key)';
end;



execute create_table();

procedures can be executed independently






CREATE OR REPLACE FUNCTION get_experience (emp_id IN number)
    RETURN number
IS
  exp_in_days number;

BEGIN

   select round(sysdate-join_date, 2) into  exp_in_days from neoemployees where employee_id=emp_id;

	return exp_in_days;
END;


/*way 1*/

declare
    emp_exp number;
begin
	emp_exp:=get_experience (121);
	dbms_output.put_line(emp_exp || ' days');
	dbms_output.put_line(round(emp_exp/365));
	if (round(emp_exp/365)) >=35 then
        dbms_output.put_line('Clappp!!!!!');
	end if;
end;

/*way 2*/

declare
    emp_exp number;
begin
	if (round(get_experience (121)/365)) >=35 then
        dbms_output.put_line('Clappp!!!!!');
	end if;
end;


/*way 3*/

select get_experience (121) " exp in days"
from dual;


select employees_id, get_experience (employees_id) "exp in days"
from employees;


CREATE OR REPLACE FUNCTION days_between (
    l_date1 IN DATE,      
    l_date2 IN DATE     
) 
RETURN NUMBER
IS
    days NUMBER;    
BEGIN
    days := (l_date1 - l_date2 ); 
    RETURN days;
END;



CREATE OR REPLACE FUNCTION days_between (
    l_date1 IN DATE,      
    l_date2 IN DATE default sysdate    
) 
RETURN NUMBER
IS
    days NUMBER;    
BEGIN
    days := (l_date1 - l_date2 ); 
    RETURN days;
END;
select days_between('12-Jan-25') from dual;
select days_between('1-Jan-25','12-Jan-25') from dual;
select days_between('12-Jan-25','1-Jan-25') from dual;


select employee_id,days_between(sysdate, join_date) "experience in days"
from neoemployees
where dept_code='SM';

select employee_id,round(days_between(sysdate, join_date)) "experience in days"
from neoemployees
where dept_code='SM';

select days_between('23-Jan-25', '16-Jan-25')
from dual;




declare
    	TYPE numbers IS VARRAY(1000) OF number ;
		array numbers:=numbers(56,68,34,67);
begin
		null;
end;


CREATE OR REPLACE FUNCTION rowsumm (p_numbers IN SYS.ODCINUMBERLIST)
RETURN NUMBER
IS
  l_sum NUMBER := 0;
BEGIN
  FOR i IN 1 .. p_numbers.COUNT LOOP
    l_sum := l_sum + p_numbers(i);
  END LOOP;


  RETURN l_sum;
END;

select rowsumm( SYS.ODCINUMBERLIST(78,56,45,34))
from dual;

CREATE OR REPLACE PACKAGE mathematics AS 
TYPE numbers IS VARRAY(1000) OF number ; 
function rowsum(array numbers) return number; 
END mathematics;



note : rowsumm(56,78,90,34) which data type holds n number of parameters.


CREATE OR REPLACE FUNCTION multdivide (num1 IN  number, num2 IN number, mult OUT number ) return number
IS
    division number(5,1);
BEGIN
   	division:=num1/num2;
	mult:=num1*num2;
    RETURN division;
END;

declare
	res number(5,1);
	res2 number(10,2);
begin
	res:=divide(2.4,5.4, res2);
	dbms_output.put_line(res);
	dbms_output.put_line(res2);
end;





