Implicit cursror


declare 
    fname employees.first_name%type;
begin
	select first_name into fname from employees where employees_id='111';
	dbms_output.put_line(fname);
end;
declare 
    fname employees.first_name%type;
	lname employees.last_name%type;
begin
	select first_name,last_name into fname,lname from employees where employees_id='111';
	dbms_output.put_line(fname);
	dbms_output.put_line(lname);
end;

declare 
    details employees%rowtype;
begin
	select * into details from employees where employees_id='111';
	dbms_output.put_line(details.first_name);
	dbms_output.put_line(details.last_name);
	dbms_output.put_line(details.city);
end;


Explicit cursor

declare 
    fname employees.first_name%type;
	CURSOR firstnames IS select first_name from employees;
	rcount number;
	b boolean;
begin
    b:=firstnames%ISOPEN;
    -- dbms_output.put_line(b);
	OPEN firstnames;
	-- dbms_output.put_line(firstnames%ISOPEN);
	rcount:=firstnames%ROWCOUNT;
	dbms_output.put_line(rcount);
	LOOP
    	FETCH  firstnames  INTO fname;
		-- dbms_output.put_line(firstnames%FOUND);
		-- dbms_output.put_line(firstnames%NOTFOUND);
		 dbms_output.put_line(upper(fname));
		
	EXIT WHEN firstnames%NOTFOUND;
	end loop;
	rcount:=firstnames%ROWCOUNT;
	dbms_output.put_line(rcount);
	close firstnames;
	exception 
        when too_many_rows then
        dbms_output.put_line(sqlerrm);  
end;


Explicit cursor : user control
declare 
    fname employees.first_name%type;
	CURSOR firstnames IS select first_name from employees;
begin
	OPEN firstnames;
	LOOP
    	FETCH  firstnames  INTO fname;
		dbms_output.put_line(upper(fname));
		EXIT WHEN firstnames%NOTFOUND;
	end loop;
	close firstnames;
	exception 
        when others then
        dbms_output.put_line(sqlerrm);  
end;


Explicit cursor : for loop
declare 
     ct employees.city%type;
     cursor emp_cursor is
        select first_name, last_name, city from employees;
begin
    for emp in emp_cursor loop
        dbms_output.put_line(emp.first_name ||' '||emp.last_name || ' living in ' ||nvl(emp.city, 'no city'));
    end loop;
exception 
    when others then
        dbms_output.put_line(sqlerrm);
end;

declare 

implicit cursor : for loop
begin
    for emp in  (select first_name, last_name, city from employees) loop
        dbms_output.put_line(emp.first_name ||' '||emp.last_name || ' living in ' ||nvl(emp.city, 'no city'));
    end loop;
exception 
    when others then
        dbms_output.put_line(sqlerrm);
end;

below query is only working with cursor

declare 
     cursor comm_cursor is select distinct commission from employees where dept_code='WD';
	 wd_commission  employees.commission%type;
begin
    open comm_cursor;
    loop
    FETCH  comm_cursor INTO wd_commission;
	exit when comm_cursor%notfound;
 	if wd_commission is null then
         dbms_output.put_line('no commission');
	end if;
    dbms_output.put_line(wd_commission);
	end loop;
exception 
    when others then
        dbms_output.put_line(sqlerrm);
end;


Q. Show employees having salary <=salary 10000 . Show message 'no single employee' if  no data found
declare 
     cursor emp_cursor is select * from employees where salary<=15000;
     emprecord  employees%rowtype;
		rcount number;
begin
    open emp_cursor;
	loop
    fetch emp_cursor into  emprecord;
	rcount:=emp_cursor%rowcount;
	if emp_cursor%notfound and emp_cursor%rowcount=0 then 	
        dbms_output.put_line('no single employee found');
		exit;
	end if;
	exit when emp_cursor%notfound;
	dbms_output.put_line(rcount);
    dbms_output.put_line(emprecord.first_name);
	end loop;
	exception 
    when others then
        dbms_output.put_line(sqlerrm);
end;

looping is not efficient way for above question

declare 
     emprecord  employees%rowtype;
begin
    for emprecord in (select * from employees where salary<=10000) loop
        dbms_output.put_line(emprecord.first_name);
	end loop;
	exception 
    when others then
        dbms_output.put_line(sqlerrm);
end;
Use Cursor FOR Loop: When you want a simpler and cleaner way to iterate over a result set without the overhead of managing the cursor lifecycle manually. This is often sufficient for straightforward row processing.

